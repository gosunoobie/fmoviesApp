import { createFilter } from '@rollup/pluginutils';

function css(options) {
  if ( options === void 0 ) options = {};

  var filter = createFilter(options.include || ['**/*.css'], options.exclude);
  var styles = {};
  var output = options.output;
  var name = options.name;
  var fileName = options.fileName;

  // Get all CSS modules in the order that they were imported
  var getCSSModules = function (id, getModuleInfo, modules, visitedModules) {
    if ( modules === void 0 ) modules = new Set();
    if ( visitedModules === void 0 ) visitedModules = new Set();

    if (modules.has(id) || visitedModules.has(id)) {
      return new Set()
    }

    if (filter(id)) { modules.add(id); }

    // Prevent infinite recursion with circular dependencies
    visitedModules.add(id);

    // Recursively retrieve all of imported CSS modules
    var info = getModuleInfo(id);
    if (!info) { return modules }

    info.importedIds.forEach(function (importId) {
      modules = new Set(
        [].concat(
          Array.from(modules),
          Array.from(getCSSModules(importId, getModuleInfo, modules, visitedModules))
        )
      );
    });

    return modules
  };

  return {
    name: 'css',
    transform: function transform(code, id) {
      if (!filter(id)) {
        return
      }

      // When output is disabled, the stylesheet is exported as a string
      if (options.output === false) {
        return {
          code: 'export default ' + JSON.stringify(code),
          map: { mappings: '' }
        }
      }

      // Keep track of every stylesheet
      // Check if it changed since last render
      // NOTE: If we are in transform block, we can assume styles[id] !== code, right?
      if (styles[id] !== code && (styles[id] || code)) {
        styles[id] = code;
      }

      return ''
    },
    generateBundle: function generateBundle(opts, bundle) {
      var ids = [];

      // Determine import order of files
      for (var file in bundle) {
        var root = bundle[file].facadeModuleId;
        var modules = getCSSModules(root, this.getModuleInfo);
        ids.push.apply(ids, Array.from(modules));
      }

      // Combine all stylesheets, respecting import order
      var css = ids.map(function (id) { return styles[id]; }).join('\n');

      // Emit styles through callback
      if (typeof options.output === 'function') {
        options.output(css, styles, bundle);
        return
      }

      if (typeof output == 'string') {
        fileName = fileName || output;
      }

      // Emit styles to file
      this.emitFile({ type: 'asset', name: name, fileName: fileName, source: css + '\n' });
    }
  }
}

export { css as default };
